# -*- coding: utf-8 -*-
"""Rainfall prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPlkT7YpZ3PxtxW5H7ycYeVu2W1Rd62x
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
df=pd.read_csv('/content/rainfall_area-wt_India_1901-2015.csv')
df.head()

import plotly.graph_objects as go
import plotly.express as px

# analyze trends in annual rainfall over time
annual_rainfall = df[['YEAR', 'ANNUAL']]

fig_annual = go.Figure()
fig_annual.add_trace(go.Scatter(
    x=annual_rainfall['YEAR'],
    y=annual_rainfall['ANNUAL'],
    mode='lines',
    name='Annual Rainfall',
    line=dict(color='blue', width=2),
    opacity=0.7
))
fig_annual.add_trace(go.Scatter(
    x=annual_rainfall['YEAR'],
    y=[annual_rainfall['ANNUAL'].mean()] * len(annual_rainfall),
    mode='lines',
    name='Mean Rainfall',
    line=dict(color='red', dash='dash')
))
fig_annual.update_layout(
    title='Trend in Annual Rainfall in India (1901-2015)',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    template='plotly_white',
    legend=dict(title="Legend"),
    height=500
)
fig_annual.show()

# identify months with the highest and lowest rainfall on average
monthly_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
monthly_avg = df[monthly_columns].mean()

highest_rainfall_month = monthly_avg.idxmax()
lowest_rainfall_month = monthly_avg.idxmin()

fig_monthly = px.bar(
    x=monthly_avg.index,
    y=monthly_avg.values,
    labels={'x': 'Month', 'y': 'Rainfall (mm)'},
    title='Average Monthly Rainfall in India (1901-2015)',
    text=monthly_avg.values
)
fig_monthly.add_hline(
    y=monthly_avg.mean(),
    line_dash="dash",
    line_color="red",
    annotation_text="Mean Rainfall",
    annotation_position="top right"
)
fig_monthly.update_traces(marker_color='skyblue', marker_line_color='black', marker_line_width=1)
fig_monthly.update_layout(template='plotly_white', height=500)
fig_monthly.show()

# seasonal rainfall distribution
seasonal_columns = ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']
seasonal_avg = df[seasonal_columns].mean()

fig_seasonal = px.bar(
    x=seasonal_avg.index,
    y=seasonal_avg.values,
    labels={'x': 'Season', 'y': 'Rainfall (mm)'},
    title='Seasonal Rainfall Distribution in India (1901-2015)',
    text=seasonal_avg.values,
    color=seasonal_avg.values,
    color_continuous_scale=['gold', 'skyblue', 'green', 'orange']
)

fig_seasonal.update_traces(marker_line_color='black', marker_line_width=1)
fig_seasonal.update_layout(
    template='plotly_white',
    height=500,
    coloraxis_colorbar=dict(title='mm')
)
fig_seasonal.update_layout(template='plotly_white', height=500)
fig_seasonal.show()

import plotly.graph_objects as go


# Assuming `rainfall_data` is already loaded and cleaned
# Columns: 'YEAR', 'ANNUAL', 'JAN' ... 'DEC', 'Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec'

# ------------------------
# ðŸ”¹ Annual Rainfall Trend
# ------------------------
annual_rainfall = df[['YEAR', 'ANNUAL']].dropna()

overall_mean = annual_rainfall['ANNUAL'].mean()

fig_annual = go.Figure()
fig_annual.add_trace(go.Scatter(
    x=annual_rainfall['YEAR'],
    y=annual_rainfall['ANNUAL'],
    mode='lines+markers',
    name='Annual Rainfall',
    line=dict(color='royalblue', width=2),
    opacity=0.8
))
fig_annual.add_trace(go.Scatter(
    x=annual_rainfall['YEAR'],
    y=[overall_mean] * len(annual_rainfall),
    mode='lines',
    name=f'Mean Rainfall ({overall_mean:.2f} mm)',
    line=dict(color='firebrick', dash='dash')
))
fig_annual.update_layout(
    title=f'Trend in Annual Rainfall in India ({annual_rainfall["YEAR"].min()}â€“{annual_rainfall["YEAR"].max()})',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    template='plotly_white',
    legend=dict(title="Legend", orientation="h", x=0.5, xanchor="center"),
    height=500
)
fig_annual.show()

monthly_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN',
                   'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
monthly_avg = df[monthly_columns].mean()

fig_monthly = px.bar(
    x=monthly_avg.index,
    y=monthly_avg.values,
    labels={'x': 'Month', 'y': 'Rainfall (mm)'},
    title='Average Monthly Rainfall in India',
    text=monthly_avg.round(1).values
)
fig_monthly.add_hline(
    y=monthly_avg.mean(),
    line_dash="dash",
    line_color="red",
    annotation_text=f"Mean Rainfall: {monthly_avg.mean():.2f} mm",
    annotation_position="top right"
)
fig_monthly.update_traces(marker_color='skyblue', marker_line_color='black', marker_line_width=1)
fig_monthly.update_layout(template='plotly_white', height=500)
fig_monthly.show()

# -------------------------------
# ðŸ”¹ Seasonal Rainfall Distribution
# -------------------------------
seasonal_columns = ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']
seasonal_avg = df[seasonal_columns].mean()

fig_seasonal = px.bar(
    x=seasonal_avg.index,
    y=seasonal_avg.values,
    labels={'x': 'Season', 'y': 'Rainfall (mm)'},
    title='Average Seasonal Rainfall in India',
    text=seasonal_avg.round(1).values,
    color=seasonal_avg.values,
    color_continuous_scale=['gold', 'skyblue', 'green', 'orange']
)

fig_seasonal.update_traces(marker_line_color='black', marker_line_width=1)
fig_seasonal.update_layout(
    template='plotly_white',
    height=500,
    coloraxis_colorbar=dict(title='Rainfall (mm)'),
    showlegend=False
)
fig_seasonal.show()

"""# **Trend Analysis Per Season Over Time**"""

seasonal_trends = df[['YEAR', 'Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']]

fig = go.Figure()
for col in ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']:
    fig.add_trace(go.Scatter(
        x=seasonal_trends['YEAR'],
        y=seasonal_trends[col],
        mode='lines',
        name=col
    ))
fig.update_layout(
    title='Seasonal Rainfall Trends Over Years',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    template='plotly_white',
    height=500
)
fig.show()

"""## **Detect Drought or Flood Years**"""

df['Drought_Year'] = df['ANNUAL'] < annual_rainfall['ANNUAL'].mean() * 0.8

df['Flood_Year'] = df['ANNUAL'] > annual_rainfall['ANNUAL'].mean() * 1.2

print("ðŸ”¸ Drought Years:")
print(df[df['Drought_Year']][['YEAR', 'ANNUAL']])

print("\nðŸ”¹ Flood Years:")
print(df[df['Flood_Year']][['YEAR', 'ANNUAL']])

"""# ** Month-wise Variability (Volatility)**"""

monthly_std = df[monthly_columns].std().sort_values(ascending=False)
print("ðŸ“Š Monthly Rainfall Variability (Std Dev):")
print(monthly_std)

"""# **Moving Average (Smoothing the Trend)**"""

df['Annual_Smooth'] = df['ANNUAL'].rolling(window=5).mean()

fig = go.Figure()
fig.add_trace(go.Scatter(x=df['YEAR'], y=df['ANNUAL'], mode='lines', name='Actual'))
fig.add_trace(go.Scatter(x=df['YEAR'], y=df['Annual_Smooth'], mode='lines', name='5-Year Avg', line=dict(dash='dash')))
fig.update_layout(title='Smoothed Annual Rainfall Trend', xaxis_title='Year', yaxis_title='Rainfall (mm)', template='plotly_white')
fig.show()

import pandas as pd
import plotly.express as px

# Reshape monthly columns into long format
monthly_cols = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN',
                'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']

rainfall_long = pd.melt(
    df,
    id_vars=['YEAR'],
    value_vars=monthly_cols,
    var_name='Month',
    value_name='Rainfall'
)

# Calculate average rainfall per month
monthly_means = rainfall_long.groupby('Month')['Rainfall'].mean()

# Map monthly mean back to the data to calculate anomaly
rainfall_long['Monthly_Mean'] = rainfall_long['Month'].map(monthly_means)
rainfall_long['Anomaly'] = rainfall_long['Rainfall'] - rainfall_long['Monthly_Mean']

anomaly_pivot = rainfall_long.pivot(index='YEAR', columns='Month', values='Anomaly')
anomaly_pivot = anomaly_pivot[monthly_cols]  # Ensure month order

fig = px.imshow(
    anomaly_pivot.T,
    labels=dict(x="Year", y="Month", color="Rainfall Anomaly (mm)"),
    title="Monthly Rainfall Anomalies (Heatmap)",
    aspect="auto",
    color_continuous_scale="RdBu"
)
fig.update_layout(height=500)
fig.show()

# Filter for July anomalies
july_anomalies = rainfall_long[rainfall_long['Month'] == 'JUL']

fig = px.line(
    july_anomalies,
    x='YEAR',
    y='Anomaly',
    title='Rainfall Anomalies in July Over Years',
    markers=True
)
fig.update_traces(line_color='green')
fig.update_layout(yaxis_title="Anomaly (mm)", xaxis_title="Year", height=500)
fig.show()

# Seasonal and Annual columns
seasonal_columns = ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']
target_column = 'ANNUAL'

# Compute correlation matrix
correlation_df = df[seasonal_columns + [target_column]].corr()

# Extract only seasonal vs annual correlations
seasonal_corr = correlation_df[target_column][seasonal_columns].sort_values(ascending=False)

# Display correlation values
print("ðŸ”¹ Correlation of Seasonal Rainfall with Annual Totals:\n")
print(seasonal_corr)

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(x=seasonal_corr.index, y=seasonal_corr.values, palette="Blues_d")
plt.title("Correlation of Seasonal Rainfall with Annual Rainfall")
plt.ylabel("Correlation Coefficient")
plt.xlabel("Season")
plt.ylim(0, 1)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming rainfall_data contains columns: 'JAN' to 'DEC' and 'Jun-Sep'
monthly_cols = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']

# Calculate correlation of Jun-Sep with each month
correlations = {}
for month in monthly_cols:
    corr = df['Jun-Sep'].corr(df[month])
    correlations[month] = corr

# Convert to DataFrame for plotting
corr_df = pd.DataFrame.from_dict(correlations, orient='index', columns=['Correlation'])
corr_df = corr_df.sort_values(by='Correlation', ascending=False)

# Display
print("ðŸ”¹ Correlation of Jun-Sep with Individual Months:\n")
print(corr_df)

# Plot
plt.figure(figsize=(10, 5))
sns.barplot(x=corr_df.index, y=corr_df['Correlation'], palette="viridis")
plt.title("Correlation of 'Jun-Sep' Rainfall with Each Month")
plt.ylabel("Correlation Coefficient")
plt.xlabel("Month")
plt.xticks(rotation=45)
plt.ylim(-1, 1)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Monthly anomaly: deviation from mean
monthly_mean = df[monthly_cols].mean()
monthly_anomaly = df.copy()
for col in monthly_cols:
    monthly_anomaly[col] = monthly_anomaly[col] - monthly_mean[col]

# Optional: include Jun-Sep anomalies
monthly_anomaly['Jun-Sep'] = df['Jun-Sep'] - df['Jun-Sep'].mean()

# Plot anomaly heatmap
import seaborn as sns

plt.figure(figsize=(14, 6))
sns.heatmap(monthly_anomaly.set_index('YEAR')[monthly_cols + ['Jun-Sep']].T, cmap='coolwarm', center=0, annot=False)
plt.title("Monthly Rainfall Anomalies (Deviation from Long-Term Mean)")
plt.xlabel("Year")
plt.ylabel("Month")
plt.tight_layout()
plt.show()

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# prepare data for clustering
rainfall_features = df[['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec', 'ANNUAL']]
scaler = StandardScaler()
scaled_features = scaler.fit_transform(rainfall_features)

# perform k-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
df['Rainfall_Cluster'] = kmeans.fit_predict(scaled_features)

# map cluster labels to categories (e.g., Dry, Normal, Wet)
cluster_labels = {0: 'Dry', 1: 'Normal', 2: 'Wet'}
df['Rainfall_Category'] = df['Rainfall_Cluster'].map(cluster_labels)

fig = px.scatter(
    df,
    x='YEAR',
    y='ANNUAL',
    color='Rainfall_Category',
    title='Clustering of Years Based on Rainfall Patterns',
    labels={'YEAR': 'Year', 'ANNUAL': 'Annual Rainfall (mm)', 'Rainfall_Category': 'Rainfall Category'},
    color_discrete_sequence=px.colors.qualitative.Set2,
    hover_data={'Rainfall_Cluster': True, 'Rainfall_Category': True}
)

fig.update_layout(
    template='plotly_white',
    legend_title='Rainfall Category',
    height=500
)

fig.show()

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import plotly.express as px

# ----------------------------------------
# 1. Prepare Monthly Rainfall Data (Assumes columns: 'YEAR', 'Jan', ..., 'Dec')
# ----------------------------------------
monthly_columns = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL',
       'AUG', 'SEP', 'OCT', 'NOV', 'DEC']

rainfall_features = df[monthly_columns]

# ----------------------------------------
# 2. Scale the monthly features
# ----------------------------------------
scaler = StandardScaler()
scaled_features = scaler.fit_transform(rainfall_features)

# ----------------------------------------
# 3. Perform K-Means clustering
# ----------------------------------------
kmeans = KMeans(n_clusters=3, random_state=42)
df['Rainfall_Cluster'] = kmeans.fit_predict(scaled_features)

# Optional: Calculate ANNUAL rainfall if not already present
if 'ANNUAL' not in df.columns:
    df['ANNUAL'] = df[monthly_columns].sum(axis=1)

# ----------------------------------------
# 4. Map cluster labels to categories (Optional sorting by cluster means)
# ----------------------------------------
# Sort clusters by average annual rainfall
cluster_means = df.groupby('Rainfall_Cluster')['ANNUAL'].mean().sort_values()
cluster_labels_sorted = {cluster: label for cluster, label in zip(cluster_means.index, [ 'Normal', 'Wet','Dry'])}
df['Rainfall_Category'] = df['Rainfall_Cluster'].map(cluster_labels_sorted)

# ----------------------------------------
# 5. Visualize clusters: YEAR vs ANNUAL Rainfall
# ----------------------------------------
fig = px.scatter(
    df,
    x='YEAR',
    y='ANNUAL',
    color='Rainfall_Category',
    title='Yearly Clustering Based on Monthly Rainfall Patterns',
    labels={'YEAR': 'Year', 'ANNUAL': 'Annual Rainfall (mm)', 'Rainfall_Category': 'Rainfall Category'},
    color_discrete_sequence=px.colors.qualitative.Set2,
    hover_data={'Rainfall_Cluster': True, 'Rainfall_Category': True}
)

fig.update_layout(
    template='plotly_white',
    legend_title='Rainfall Category',
    height=500
)

fig.show()

cluster_centers = pd.DataFrame(
    scaler.inverse_transform(kmeans.cluster_centers_),
    columns=rainfall_features.columns
)
cluster_centers['Category'] = [cluster_labels[i] for i in range(3)]
print(cluster_centers.set_index('Category').T)

sns.boxplot(x='Rainfall_Category', y='ANNUAL', data=df)
px.timeline(df, x_start='YEAR', x_end='YEAR', y='Rainfall_Category')

#Step 1: Prepare Data in Time Series Format

import pandas as pd

# Convert wide format to long (e.g., from JAN-DEC into month rows)
monthly_cols = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC']

# Convert into a long-format time series with datetime
rainfall_long = df.melt(id_vars=['YEAR'], value_vars=monthly_cols,
                                    var_name='Month', value_name='Rainfall')

# Map months to numbers
month_map = {'JAN':1, 'FEB':2, 'MAR':3, 'APR':4, 'MAY':5, 'JUN':6,
             'JUL':7, 'AUG':8, 'SEP':9, 'OCT':10, 'NOV':11, 'DEC':12}
rainfall_long['Month_Num'] = rainfall_long['Month'].map(month_map)

# Create a full datetime column
rainfall_long['ds'] = pd.to_datetime(dict(year=rainfall_long['YEAR'], month=rainfall_long['Month_Num'], day=1))

# Final Prophet format
df_prophet = rainfall_long[['ds', 'Rainfall']].rename(columns={'Rainfall': 'y'})


#step 2: Forecast with Prophet

from prophet import Prophet

model = Prophet(yearly_seasonality=True)
model.add_seasonality(name='monthly', period=12, fourier_order=8)
from prophet.diagnostics import cross_validation, performance_metrics


model.fit(df_prophet)

# Forecast for 25 future years (25 * 12 months = 300 months)
future = model.make_future_dataframe(periods=300, freq='MS')  # 'MS' = month start

# Remove the line that caused the error
# forecast_future = model.copy()
# forecast_future['Year'] = forecast_future['ds'].dt.year
# forecast_future['Month'] = forecast_future['ds'].dt.month

forecast = model.predict(future)
# Add this after forecast
forecast_future = forecast.copy()
forecast_future['Year'] = forecast_future['ds'].dt.year
forecast_future['Month'] = forecast_future['ds'].dt.month

# Optional: Add custom monthly seasonality
model = Prophet(yearly_seasonality=True)
model.add_seasonality(name='monthly', period=12, fourier_order=8)
model.fit(df_prophet)

import plotly.graph_objects as go

# 1. Prepare data for plotting
# We need Year and Month columns from the forecast dataframe
# Rename ds to Year and extract month number
forecast_future = forecast.copy()
forecast_future['Year'] = forecast_future['ds'].dt.year
forecast_future['Month'] = forecast_future['ds'].dt.month


# 1. Pivoted heatmap data
heatmap_data = forecast_future.pivot(index='Year', columns='Month', values='yhat')

# 2. Line plot data: average rainfall per year
yearly_avg = forecast_future.groupby('Year')['yhat'].mean().reset_index()

# 3. Create the figure
fig = go.Figure()

# ---- Heatmap (rainfall intensity by Year-Month) ----
fig.add_trace(go.Heatmap(
    z=heatmap_data.values,
    x=list(range(1, 13)),  # Months
    y=heatmap_data.index,  # Years
    colorscale='Blues',
    colorbar=dict(title='Rainfall (mm)'),

    hovertemplate='Year: %{y}<br>Month: %{x}<br>Rainfall: %{z:.1f} mm<extra></extra>'
))

# ---- Line plot: Avg Rainfall per Year (shown as overlay) ----
fig.add_trace(go.Scatter(
   x=[7]*len(yearly_avg),
  # Center the line at Month 6 (June) for visibility
    y=yearly_avg['Year'],
    mode='lines+markers',
    line=dict(color='red', width=2),
    marker=dict(size=5),
    name='Yearly Avg Rainfall',
    hovertemplate='Year: %{y}<br>Avg Rainfall: %{text:.1f} mm<extra></extra>',
    text=yearly_avg['yhat']
))

# 4. Final layout
fig.update_layout(
    title='Predicted Monthly Rainfall Heatmap with Yearly Average Trend (2016â€“2040)',
    xaxis_title='Month',
    yaxis_title='Year',
    xaxis=dict(tickmode='array', tickvals=list(range(1, 13)),
               ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']),
    height=650,
    template='plotly_white'
)

fig.show()

from prophet.diagnostics import cross_validation, performance_metrics

cv = cross_validation(model, initial='1095 days', period='365 days', horizon='365 days')
metrics = performance_metrics(cv)
print(metrics[['horizon', 'mae', 'rmse', 'mape']])

